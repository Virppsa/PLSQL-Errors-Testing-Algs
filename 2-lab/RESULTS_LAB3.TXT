SQL> SET SERVEROUTPUT ON;
SQL> DECLARE
  2      --Padarau naują tipą (composite data type). Čia mano array realiai, kur dėsiu skaičius, tai tipas skaitinis
  3      TYPE NumberTable IS TABLE OF NUMBER INDEX BY PLS_INTEGER;
  4      numbers NumberTable; --Čia eis mano paprasti skaičiai
  5      sortedNumbers NumberTable; --Čia eis mano surūšiuoti skaičiai
  6
  7      -- Funkcija skaičių generavimui ------------------------------------------------------
  8      FUNCTION GenerateRandomNumber RETURN NUMBER IS
  9      BEGIN
  10          RETURN TRUNC(DBMS_RANDOM.VALUE(1, 9)); --Su TRUNC, nes DBMS_RANDOM.VALUE generuoja su kableliu skaičius
  11      END GenerateRandomNumber;
  12
  13      --Sudedam į array
  14      PROCEDURE GenerateNumbers(n IN NUMBER) IS
  15      BEGIN
  16          FOR i IN 1..n LOOP
  17              numbers(i) := GenerateRandomNumber; --Sudedam į arrays suindeksuotus skaičius
  18              sortedNumbers(i) := numbers(i); --Dėsim vėliau surūšiuotus
  19          END LOOP;
  20      END GenerateNumbers;
  21
  22      --Atspausdinu skaičius, kurie sudėti array
  23      PROCEDURE PrintNumbers(arr IN NumberTable) IS
  24          --Dedam į stringą mūsų norimus atspausdinti skaičius
  25          output_line VARCHAR2(4000) := ''; --čia gal ir mažesnį galima būtų imti
  26      BEGIN
  27          FOR i IN arr.FIRST..arr.LAST LOOP --Bandome paimti i'tajį elementą iš sąrašo nuo pirmo iki paskutinio
  28              output_line := output_line || arr(i) || ' | ';
  29          END LOOP;
  30          DBMS_OUTPUT.PUT_LINE('| ' || output_line);
  31      END PrintNumbers;
  32
  33      --Mano Double Selection Sort - arba smagiau Cocktail Sort :))-------------------------------
  34      PROCEDURE DoubleSelectionSort(arr IN OUT NumberTable) IS
  35          tmp NUMBER;
  36          --kur eis maži ir dideli skaičiai (kairė/dešinė)
  37          min_index PLS_INTEGER;
  38          max_index PLS_INTEGER;
  39      BEGIN
  40          FOR i IN 1..arr.COUNT/2 LOOP --skaičiuojame iki vidurio
  41              min_index := i;
  42              max_index := i;
  43              FOR j IN i..arr.COUNT-i+1 LOOP --pajudinam paiešką į kitą poz (ne ten kur maži ar dideli sk)
  44                  IF arr(j) < arr(min_index) THEN --dedam į kairį šoną prie mažų
  45                      min_index := j;
  46                  END IF;
  47                  IF arr(j) > arr(max_index) THEN --dedam į dešinį šoną prie didelių
  48                      max_index := j;
  49                  END IF;
  50              END LOOP;
  51
  52              --Čia metam į priekį mažiausią
  53              tmp := arr(min_index); --Temp value (laikyti prieš nusprendžiant kur dėti)
  54              arr(min_index) := arr(i);
  55              arr(i) := tmp;
  56
  57              --Tikrinam ar ne blogai numetėm auksčiausią skaičių pabaigoje, kai mažiausias jau kairėje
  58              IF max_index = arr.COUNT-i+1 THEN
  59                  max_index := min_index;
  60              END IF;
  61
  62              --Čia į galą numetam didžiausią
  63              tmp := arr(max_index);
  64              arr(max_index) := arr(arr.COUNT-i+1);
  65              arr(arr.COUNT-i+1) := tmp;
  66          END LOOP;
  67      END DoubleSelectionSort;
  68
  69  --Linear search --------------------------------------------------------------------
  70      --Target yra mano ieškomas skaičius
  71      FUNCTION LinearSearch(arr IN NumberTable, target IN NUMBER) RETURN PLS_INTEGER IS
  72          iterations PLS_INTEGER := 0; --Sakėt berods, kad greitesnis ir mažiau vietos užima, tai panaudojau
  73      BEGIN
  74          FOR i IN arr.FIRST..arr.LAST LOOP --Paprastas cikliukas - einam pro kiekvieną skaičių
  75              iterations := iterations + 1;
  76
  77              IF arr(i) = target THEN
  78                  RETURN iterations;
  79              END IF;
  80
  81          END LOOP;
  82          RETURN iterations;
  83      END LinearSearch;
  84
  85  --Binary search ---------------------------------------------------------------------
  86      FUNCTION BinarySearch(arr IN NumberTable, target IN NUMBER) RETURN PLS_INTEGER IS
  87          low PLS_INTEGER := arr.FIRST;
  88          high PLS_INTEGER := arr.LAST;
  89          mid PLS_INTEGER;
  90          iterations PLS_INTEGER := 0;
  91      BEGIN
  92          WHILE low <= high LOOP --Kad neliktų 1 sk, nes jei tik vienas,tai turėtų palikti 1 iteraciją, vadinasi radom savo sk
  93              iterations := iterations + 1;
  94              mid := (low + high) / 2; --Formulė kaip eiti toliau, kai
  95
  96              IF arr(mid) < target THEN
  97                  low := mid + 1;
  98              ELSIF arr(mid) > target THEN
  99                  high := mid - 1;
  100              ELSE
  101                  RETURN iterations;
  102              END IF;
  103
  104          END LOOP;
  105          RETURN iterations;
  106      END BinarySearch;
  107
  108  -- Atprintina mano visas norimas reikšmes po skaičiavimų, palygina kuris it sk didesnis --------
  109      PROCEDURE SearchAndPrintIterations IS
  110          totalIterationsLinear PLS_INTEGER := 0;
  111          totalIterationsBinary PLS_INTEGER := 0;
  112          avgIterationsLinear NUMBER; --Naudoju NUMBER, nes reikia tiksliau paskaičiuoti (bent manau taip statistiškai tiksliau)
  113          avgIterationsBinary NUMBER;
  114      BEGIN
  115          FOR i IN numbers.FIRST..numbers.LAST LOOP
  116              totalIterationsLinear := totalIterationsLinear + LinearSearch(sortedNumbers, numbers(i));
  117              totalIterationsBinary := totalIterationsBinary + BinarySearch(sortedNumbers, numbers(i));
  118          END LOOP;
  119
  120          avgIterationsLinear := totalIterationsLinear / numbers.COUNT;
  121          avgIterationsBinary := totalIterationsBinary / numbers.COUNT;
  122
  123          DBMS_OUTPUT.PUT_LINE('Average - Linear Search: ' || TO_CHAR(avgIterationsLinear));
  124          DBMS_OUTPUT.PUT_LINE('Average - Binary Search: ' || TO_CHAR(avgIterationsBinary));
  125          DBMS_OUTPUT.PUT_LINE('Comparison: Linear Search needs ' || TO_CHAR(avgIterationsLinear - avgIterationsBinary) || ' more iterations (by average) than Binry Search.');
  126      END SearchAndPrintIterations;
  127
  128  BEGIN
  129      --Pasirinkau 20 skaičių (manau ir 10 u=tenka, tiesiog manau aiškiau matosi su didesniu arr)
  130      GenerateNumbers(20);
  131      DBMS_OUTPUT.PUT_LINE('Unsorted:');
  132      PrintNumbers(numbers);
  133
  134      DoubleSelectionSort(sortedNumbers);
  135      DBMS_OUTPUT.PUT_LINE('Sorted:');
  136      PrintNumbers(sortedNumbers);
  137
  138      --Atspausdinu likusius rezultatus
  139      SearchAndPrintIterations;
  140  END;
  141  /

Unsorted:                                                                       
| 3 | 2 | 5 | 6 | 3 | 6 | 8 | 4 | 7 | 2 | 3 | 4 | 7 | 2 | 4 | 5 | 5 | 6 | 4 | 3 
|                                                                               
Sorted:                                                                         
| 2 | 2 | 2 | 5 | 5 | 4 | 5 | 4 | 4 | 6 | 4 | 6 | 6 | 3 | 3 | 3 | 3 | 7 | 7 | 8 
|                                                                               
Average - Linear Search: 9.05                                                   
Average - Binary Search: 3.65                                                   
Comparison: Linear Search needs 5.4 more iterations (by average) than Binry     
Search.                                                                         

PL/SQL procedure successfully completed.

Commit complete.

SQL> SPOOL OFF;

